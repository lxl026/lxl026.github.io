[{"title":"Linux学习之路0x02——磁盘分区","url":"/2018/07/13/Linux学习之路0x02——磁盘分区/","content":"\n\n\n*本系列文章主要记录本人学习[《鸟哥的Linux私房菜》](http://linux.vbird.org/)过程中的重点难点。之前也有学习过Linux，但都是半途而废，现在希望有所记录，有所收获，坚持不懈。*\n\n在[《鸟哥的Linux私房菜》](http://linux.vbird.org/)中，这部分的内容相对比较简单粗略，所以我还参考了其他的一些资料，如[维基百科](https://zh.wikipedia.org)等，参考内容皆可以通过一级或二级标题的链接跳转到原文。\n\n# [MBR](https://zh.wikipedia.org/wiki/%E4%B8%BB%E5%BC%95%E5%AF%BC%E8%AE%B0%E5%BD%95)\n\n> 主引导记录（Master Boot Record，缩写：MBR），又叫做主引导扇区，是计算机开机后访问硬盘时所必须要读取的首个扇区，它在硬盘上的三维地址为（柱面，磁头，扇区）＝（0，0，1）。在深入讨论主引导扇区内部结构的时候，有时也将其开头的446字节内容特指为“主引导记录”（MBR），其后是4个16字节的“磁盘分区表”（DPT），以及2字节的结束标志（55AA）。因此，在使用“主引导记录”（MBR）这个术语的时候，需要根据具体情况判断其到底是指整个主引导扇区，还是主引导扇区的前446字节。\n\n![标准MBR结构](/img/MBR.jpg)\n\n## 主引导记录的组成\n\n- 启动代码\n\n\t主引导记录最开头是第一阶段引导代码。其中的硬盘引导程序的主要作用是检查分区表是否正确并且在系统硬件完成自检以后将控制权交给硬盘上的引导程序（如GNU GRUB）。它不依赖任何操作系统，而且启动代码也是可以改变的，从而能够实现多系统引导。\n\t\n- 硬盘分区表\n\n\t硬盘分区表占据主引导扇区的64个字节（偏移01BEH--偏移01FDH），可以对四个分区的信息进行描述，其中每个分区的信息占据16个字节。具体每个字节的定义可以参见硬盘分区结构信息。\n\t\n\t![硬盘分区结构信息](/img/DPT.jpg)\n\t\n- 结束标志字\n\t\n\t结束标志字55，AA（偏移1FEH－偏移1FFH）最后两个字节，是检验主引导记录是否有效的标志。\n\t\n## 主引导扇区的读取流程\n\n- 系统开机或者重启。\n\t1. BIOS加电自检（Power On Self Test -- POST）。BIOS执行内存地址为FFFF:0000H处的跳转指令，跳转到固化在ROM中的自检程序处，对系统硬件（包括内存）进行检查。\n\n\t2. 读取主引导记录（MBR）。当BIOS检查到硬件正常并与CMOS中的设置相符后，按照CMOS中对启动设备的设置顺序检测可用的启动设备。BIOS将相应启动设备的第一个扇区（也就是MBR扇区）读入内存地址为0000:7C00H处。\n\t\n\t3. 检查0000:7DFEH-0000:7DFFH（MBR的结束标志位）是否等于55AAH，若不等于则转去尝试其他启动设备，如果没有启动设备满足要求则显示\"NO ROM BASIC\"然后死机。\n\n\t4. 当检测到有启动设备满足要求后，BIOS将控制权交给相应启动设备。启动设备的MBR将自己复制到0000:0600H处，然后继续执行。\n\n\t5. 根据MBR中的引导代码启动引导程序。\n\t \n- 事实上，BIOS不仅检查0000 : 7DFEH-0000:7DFFH（MBR的结束标志位）是否等于55AAH，往往还对磁盘是否有写保护、主引导扇区中是否存在活动分区等进行检查。如果发现磁盘有写保护，则显示磁盘写保护出错信息；如果发现磁盘中不存在活动分区，则显示类似如下的信息“Remove disk or other media Press any key to restart”。\n\n## 主引导记录与硬盘分区\n\n从主引导记录的结构可以知道，它仅仅包含一个64个字节的硬盘分区表。由于每个分区信息需要16个字节，所以对于采用MBR型分区结构的硬盘，最多只能识别4个主要分区（Primary partition）。所以对于一个采用此种分区结构的硬盘来说，想要得到4个以上的主要分区是不可能的。这里就需要引出扩展分区了。扩展分区也是主要分区的一种，但它与主分区的不同在于理论上可以划分为无数个逻辑分区。\n\n扩展分区中逻辑驱动器的引导记录是链式的。每一个逻辑分区都有一个和MBR结构类似的扩展引导记录（EBR），其分区表的第一项指向该逻辑分区本身的引导扇区，第二项指向下一个逻辑驱动器的EBR，分区表第三、第四项没有用到。\n\nWindows系统默认情况下，一般都是只划分一个主分区给系统，剩余的部分全部划入扩展分区。这里有下面几点需要注意：\n\n- 在MBR分区表中最多4个主分区或者3个主分区＋1个扩展分区，也就是说扩展分区只能有一个，然后可以再细分为多个逻辑分区。\n\n- 在Linux系统中，硬盘分区命名为sda1－sda4或者hda1－hda4（其中a表示硬盘编号可能是a、b、c等等）。在MBR硬盘中，分区号1－4是主分区（或者扩展分区），逻辑分区号只能从5开始。\n\n- 在MBR分区表中，一个分区最大的容量为2T，且每个分区的起始柱面必须在这个disk的前2T内。你有一个3T的硬盘，根据要求你至少要把它划分为2个分区，且最后一个分区的起始扇区要位于硬盘的前2T空间内。如果硬盘太大则必须改用GPT。\n\n**2T = 2^(4x8)x512Byte,有4个字节表示分区的扇区数量，所以最多的扇区有2^(4x8)个，每个扇区大小一般为512Byte，所以得到了最大分区大小，有些地方记为2.2T**\n\n# [GPT](https://zh.wikipedia.org/wiki/GUID%E7%A3%81%E7%A2%9F%E5%88%86%E5%89%B2%E8%A1%A8)\n\n> 全局唯一标识分区表（GUID Partition Table，缩写：GPT）是一个实体硬盘的分区表的结构布局的标准。它是可扩展固件接口（EFI）标准（被Intel用于替代个人计算机的BIOS）的一部分，被用于替代BIOS系统中的一32bits来存储逻辑块地址和大小信息的主引导记录（MBR）分区表。\n![GUID Partition Table Scheme](https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/GUID_Partition_Table_Scheme.svg/275px-GUID_Partition_Table_Scheme.svg.png)\n\n## 特点\n\n在MBR硬盘中，分区信息直接存储于主引导记录（MBR）中（主引导记录中还存储着系统的引导程序）。但在GPT硬盘中，分区表的位置信息储存在GPT头中。但出于兼容性考虑，硬盘的第一个扇区仍然用作MBR，之后才是GPT头。\n\n跟现代的MBR一样，GPT也使用逻辑区块地址（LBA）取代了早期的CHS寻址方式。传统MBR信息存储于LBA 0，GPT头存储于LBA 1，接下来才是分区表本身。64位Windows操作系统使用16,384字节（或32扇区）作为GPT分区表，接下来的LBA 34是硬盘上第一个分区的开始。\n\n为了减少分区表损坏的风险，GPT在硬盘最后保存了一份分区表的副本。\n\n## 传统MBR (LBA 0)\n\n在GPT分区表的最开头，出于兼容性考虑仍然存储了一份传统的MBR，用来防止不支持GPT的硬盘管理工具错误识别并破坏硬盘中的数据，这个MBR也叫做保护MBR。在支持从GPT启动的操作系统中，这里也用于存储第一阶段的启动代码。在这个MBR中，只有一个标识为0xEE的分区，以此来表示这块硬盘使用GPT分区表。不能识别GPT硬盘的操作系统通常会识别出一个未知类型的分区，并且拒绝对硬盘进行操作，除非用户特别要求删除这个分区。这就避免了意外删除分区的危险。另外，能够识别GPT分区表的操作系统会检查保护MBR中的分区表，如果分区类型不是0xEE或者MBR分区表中有多个项，也会拒绝对硬盘进行操作。\n\n在使用MBR/GPT混合分区表的硬盘中，这部分存储了GPT分区表的一部分分区（通常是前四个分区），可以使不支持从GPT启动的操作系统从这个MBR启动，启动后只能操作MBR分区表中的分区。如Boot Camp就是使用这种方式启动Windows。\n\n## 分区表头 (LBA 1)\n\n分区表头定义了硬盘的可用空间以及组成分区表的项的大小和数量。在使用64位Windows Server 2003的机器上，最多可以创建128个分区，即分区表中保留了128个项，其中每个都是128字节。（EFI标准要求分区表最小要有16,384字节，即128个分区项的大小）\n\n分区表头还记录了这块硬盘的GUID，记录了分区表头本身的位置和大小（位置总是在LBA 1）以及备份分区表头和分区表的位置和大小（在硬盘的最后）。它还储存着它本身和分区表的CRC32校验。固件、引导程序和操作系统在启动时可以根据这个校验值来判断分区表是否出错，如果出错了，可以使用软件从硬盘最后的备份GPT中恢复整个分区表，如果备份GPT也校验错误，硬盘将不可使用。所以GPT硬盘的分区表不可以直接使用16进制编辑器修改。\n\n![GPT_LBA1](/img/GPT_LBA1.jpg)\n\n主分区表和备份分区表的头分别位于硬盘的第二个扇区（LBA 1）以及硬盘的最后一个扇区。备份分区表头中的信息是关于备份分区表的。\n\n## 分区表项 (LBA 2–33)\n\nGPT分区表使用简单而直接的方式表示分区。一个分区表项的前16字节是分区类型GUID。例如，EFI系统分区的GUID类型是{C12A7328-F81F-11D2-BA4B-00A0C93EC93B}。接下来的16字节是该分区唯一的GUID（这个GUID指的是该分区本身，而之前的GUID指的是该分区的类型）。再接下来是分区起始和末尾的64位LBA编号，以及分区的名字和属性。\n\n![GPT_LBA233](/img/GPT_LBA233.jpg)\n\n# [BIOS](https://zh.wikipedia.org/wiki/BIOS)\n\n> BIOS（Basic Input/Output System的缩写、中文：基本输入输出系统），在IBM PC兼容系统上，是一种业界标准的固件接口。[1]。BIOS这个字眼是在1975年第一次由CP/M操作系统中出现。BIOS是个人计算机启动时加载的第一个软件。\nBIOS用于电脑引导时运行系统各部分的自我检测（Power On Self Test），并加载引导程序（IPL）或存储在主存的操作系统。此外，BIOS还向操作系统提供一些系统参数。系统硬件的变化是由BIOS隐藏，程序使用BIOS功能而不是直接控制硬件。现代操作系统会忽略BIOS提供的抽象层并直接控制硬件组件。\n\n## [BIOS+MBR启动计算机过程](http://www.ruanyifeng.com/blog/2013/02/booting.html)\n\n### 第一阶段：BIOS\n\n1. 硬件自检\n\t\n\tBIOS程序首先检查，计算机硬件能否满足运行的基本条件，这叫做\"硬件自检\"（Power-On Self-Test），缩写为POST。\n\t如果硬件出现问题，主板会发出不同含义的蜂鸣，启动中止。如果没有问题，屏幕就会显示出CPU、内存、硬盘等信息。\n\t\n2. 启动顺序\n\n\t硬件自检完成后，BIOS把控制权转交给下一阶段的启动程序。\n\n\t这时，BIOS需要知道，\"下一阶段的启动程序\"具体存放在哪一个设备。也就是说，BIOS需要有一个外部储存设备的排序，排在前面的设备就是优先转交控制权的设备。这种排序叫做\"启动顺序\"（Boot Sequence）。\n\n\t打开BIOS的操作界面，里面有一项就是\"设定启动顺序\"。\n\t\n### 第二阶段：主引导记录\n\nBIOS按照\"启动顺序\"，把控制权转交给排在第一位的储存设备。\n\n这时，计算机读取该设备的第一个扇区MBR，也就是读取最前面的512个字节。如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给\"启动顺序\"中的下一个设备。\n\n\"主引导记录\"只有512个字节，放不了太多东西。它的主要作用是，告诉计算机到硬盘的哪一个位置去找操作系统。\n\n### 第三阶段：硬盘启动\n\n这时，计算机的控制权就要转交给硬盘的某个分区了，这里又分成三种情况。\n\n1. 情况A：卷引导记录\n\n\t上一节提到，四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做\"卷引导记录\"（Volume boot record，缩写为VBR）。\n\n\t\"卷引导记录\"的主要作用是，告诉计算机，操作系统在这个分区里的位置。然后，计算机就会加载操作系统了。\n\t\n2. 情况B：扩展分区和逻辑分区\n\n\t随着硬盘越来越大，四个主分区已经不够了，需要更多的分区。但是，分区表只有四项，因此规定有且仅有一个区可以被定义成\"扩展分区\"（Extended partition）。\n\n\t所谓\"扩展分区\"，就是指这个区里面又分成多个区。这种分区里面的分区，就叫做\"逻辑分区\"（logical partition）。\n\n\t计算机先读取扩展分区的第一个扇区，叫做\"扩展引导记录\"（Extended boot record，缩写为EBR）。每一个逻辑分区都有一个和MBR结构类似的扩展引导记录（EBR），其分区表的第一项指向该逻辑分区本身的引导扇区，第二项指向下一个逻辑驱动器的EBR，分区表第三、第四项没有用到。\n\n\t计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，扩展分区可以包含无数个逻辑分区。\n\n\t但是，似乎很少通过这种方式启动操作系统。如果操作系统确实安装在扩展分区，一般采用下一种方式启动。\n\t\n3. 情况C：启动管理器\n\n\t在这种情况下，计算机读取\"主引导记录\"前面446字节的机器码之后，不再把控制权转交给某一个分区，而是运行事先安装的\"启动管理器\"（boot loader），由用户选择启动哪一个操作系统。\n\n\tLinux环境中，目前最流行的启动管理器是Grub。\n\n### 第四阶段：操作系统\n\n控制权转交给操作系统后，操作系统的内核首先被载入内存。\n\n以Linux系统为例，先载入/boot目录下面的kernel。内核加载成功后，第一个运行的程序是/sbin/init。它根据配置文件（Debian系统是/etc/initab）产生init进程。这是Linux启动后的第一个进程，pid进程编号为1，其他进程都是它的后代。\n\n然后，init线程加载系统的各个模块，比如窗口程序和网络程序，直至执行/bin/login程序，跳出登录界面，等待用户输入用户名和密码。\n\n至此，全部启动过程完成。\n\n# [UEFI](https://zh.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E5%8F%AF%E5%BB%B6%E4%BC%B8%E9%9F%8C%E9%AB%94%E4%BB%8B%E9%9D%A2)\n\n> 统一可扩展固件接口（英语：Unified Extensible Firmware Interface，缩写UEFI）是一种个人电脑系统规格，用来定义操作系统与系统固件之间的软件界面，作为BIOS的替代方案。可扩展固件接口负责加电自检（POST）、联系操作系统以及提供连接操作系统与硬件的接口。\n\n## 统一可扩展固件接口（UEFI）和操作系统\n\nUEFI在概念上非常类似于一个低阶的操作系统，并且具有操控所有硬件资源的能力。不少人感觉它的不断发展将有可能代替现代的操作系统。事实上，EFI的缔造者们在第一版规范出台时就将EFI的能力限制于不足以威胁操作系统的统治地位。首先，它只是硬件和预启动软件间的接口规范；其次，UEFI环境下不提供中断的机制，也就是说每个EFI驱动程序必须用轮询（polling）的方式来检查硬件状态，并且需要以解释的方式运行，较操作系统下的机械码驱动效率更低；再则，UEFI系统不提供复杂的缓存器保护功能，它只具备简单的缓存器管理机制，具体来说就是指运行在x64或x86处理器的64位模式或保护模式下，以最大寻址能力为限把缓存器分为一个平坦的段（Segment），所有的程序都有权限访问任何一段位置，并不提供真实的保护服务。当UEFI所有组件加载完毕时，便会启动操作系统的启动程序，也可以启动一个类似于操作系统Shell的命令解释环境（即EFI Shell，部分UEFI固件内置EFI Shell），在这里，用户可以调入执行任何EFI应用程序，这些程序可以是硬件检测及除错软件，引导管理软件，设置软件，操作系统的启动程序等等，也可以加载EFI分区（ESP）中的EFI驱动程序（如文件系统驱动程序）。EFI应用程序和EFI驱动程序可以是PE格式的.efi文件，可用C语言编写。在UEFI引导模式下，操作系统的启动程序也是EFI应用程序，启动程序的EFI文件存储在EFI系统分区（ESP）上。理论上来说，对于EFI应用程序的功能并没有任何限制，任何人都可以编写这类软件，并且效果较以前MS-DOS下的软件更华丽，功能更强大。一旦引导软件将控制权交给操作系统，所有用于引导的服务代码将全部停止工作，部分运行时，代服务程序还可以继续工作，以便于操作系统一时无法找到特定设备的驱动程序时，该设备还可以继续被使用。\n\nUEFI固件区分架构，在UEFI引导模式下，通常只能运行特定架构的UEFI操作系统和特定架构的EFI应用程序（EBC程序除外）。比如，采用64位UEFI固件的PC，在UEFI引导模式下只能运行64位操作系统启动程序；而在Legacy引导模式（即BIOS兼容引导模式）下，通常不区分操作系统的比特数，既可以运行16位的操作系统（如DOS），也可以运行32位或64位的操作系统，和BIOS一样。\n\n## 统一可扩展固件接口（UEFI）的组成\n\n一般认为，UEFI由以下几个部分组成：\n1. Pre-EFI初始化模块\n2. EFI驱动程序执行环境\n3. EFI驱动程序\n4. 兼容性支持模块（CSM）\n5. EFI高层应用\n6. GUID磁盘分区表\n\t\n在实现中，统一可扩展固件接口（UEFI）初始化模块和驱动执行环境通常被集成在一个只读存储器中。Pre-EFI初始化程序在系统开机的时候最先得到执行，它负责最初的CPU，主桥及存储器的初始化工作，紧接着载入EFI驱动程序执行环境（DXE）。当DXE被载入运行时，系统便具有了枚举并加载其他EFI驱动程序的能力。在基于PCI架构的系统中，各PCI桥及PCI适配器的EFI驱动程序会被相继加载及初始化；这时，系统进而枚举并加载各桥接器及适配器后面的各种总线及设备的EFI驱动程序，周而复始，直到最后一个设备的EFI驱动程序被成功加载。正因如此，EFI驱动程序可以放置于系统的任何位置，只要能保证它可以按顺序被正确枚举。例如一个具PCI-E总线接口的RAID存储适配器，其EFI驱动程序一般会放置在这个设备的匹配PCI规范的扩展只读存储器（PCI Expansion ROM）中，当PCI总线驱动程序被加载完毕，并开始枚举其子设备时，这个存储适配器旋即被正确识别并加载它的EFI驱动程序。部分EFI驱动程序还可以放置在某个磁盘的EFI系统分区（ESP）中，只要这些驱动程序不是用于加载这个磁盘的驱动的必要部件。在EFI规范中，一种突破传统MBR磁盘分区结构限制的GUID磁盘分区系统（GPT）被引入，新结构中，磁盘的主分区数不再受限制（在MBR结构下，只能存在4个主分区），另外EFI/UEFI+GUID结合还可以支持2.1 TB以上硬盘（有测试显示，3TB硬盘使用MBR，并且安装Windows 6.x 64位系统，只能识别到2.1TB），并且分区类型将由GUID来表示。在众多的分区类型中，EFI系统分区可以被UEFI固件访问，可用于存放操作系统的引导程序、EFI应用程序和EFI驱动程序。EFI系统分区采用FAT文件系统（UEFI不支持exFAT），容量小，在Windows操作系统下，默认是隐藏的。UEFI固件通过运行EFI系统分区中的启动程序启动操作系统。CSM是在x86平台UEFI系统中的一个特殊的模块，它将为不具备UEFI引导能力的操作系统（如Windows XP）以及16位的传统Option ROM（即非EFI的Option ROM）提供类似于传统BIOS的系统服务。Secure Boot和CSM不兼容，因此在UEFI固件设置中打开CSM前，需要在UEFI固件设置中关闭Secure Boot。\n\n## UEFI开机过程\n\n1. 系统开机 - 上电自检（Power On Self Test 或 POST）。\n2. UEFI 固件被加载，并由它初始化启动要用的硬件。\n3. 固件读取其引导管理器以确定从何处（比如，从哪个硬盘及分区）加载哪个 UEFI 应用。\n4. 固件按照引导管理器中的启动项目，加载UEFI 应用。\n5. 已启动的 UEFI 应用还可以启动其他应用（对应于 UEFI shell 或 rEFInd 之类的引导管理器的情况）或者启动内核及initramfs（对应于GRUB之类引导器的情况），这取决于 UEFI 应用的配置。","tags":["Linux"]},{"title":"Linux学习之路0x01——什么是Linux","url":"/2018/07/12/Linux学习之路0x01——什么是Linux/","content":"\n\n*本系列文章主要记录本人学习[《鸟哥的Linux私房菜》](http://linux.vbird.org/)过程中的重点难点。之前也有学习过Linux，但都是半途而废，现在希望有所记录，有所收获，坚持不懈。*\n\n知道Linux很久了，但是稍微一问细些，如RedHat是什么、Debian是什么、Ubuntu和CentOS的区别是什么等等这些问题，都是一头雾水。本文从Unix开始，简单梳理Unix和LInux的历史过程，以及各个Linux相关概念，主要理清Unix、Linux、GNU的关系以及区分Linux kernel与Linux Distributions。\n\n## Unix与Linux的历史\n\n- 1969年以前，Bell、MIT、GE合作开发“Multics”系统\n- 1969年，Bell实验室退出合作计划，Bell的Ken Thompson 用汇编语言写出了Unix原型Unics\n- 1973年，Ritchie等人用C语言写成第一个正式的Unix核心\n- 1977年，BSD诞生：Berkeley大学的Bill Joy在Unix的核心代码上着手修改，命名为Berkeley Software Distribution\n- 1979年，Unix的第七版System V可以支持x86架构，Unix版权被AT&T收回\n- 1984年，Andrew Tanebaum（谭宁邦）开始开发Minix，1987年发布；Richard Mathew Stallman发起GNU计划\n- 1988年前后，Linus Torvalds不满于Minix，开始用GNU计划中的bash工作环境软件和gcc编译器撰写操作系统核心\n- 1991年,Linus Torvalds初次释出Linux核心 0.02，参考POSIX规范，相容于Unix\n- 1994年，在虚拟团队的共同努力下，Linus发表Linux正式核心1.0\n...\n\n## Linux Distributions\n\n从前面的历史中可以看到，Linus基于GNU计划开发出Linux**核心**与核心工具。\n而Linux Distribution则是kernel+Softwares+Tools，各个Distribution需遵循Linux Standard Base（LSB）、Filesystem Hierarchy Standard（FHS）等标准规范。\nDistributions主要分为两大系统，一种是使用RPM（Red-Hat Package Manager）方式安装软件的系统，另一种是使用DPKG（Debian Packager）方式安装软件的系统\n\n|   | RPM  | DPKG  | others  |\n| ------------ | ------------ | ------------ | ------------ |\n| 商业公司  | RHEL（Red Hat公司）SusE  | Ubuntu  |   |\n| 社群单位  | Fedoras CentOS openSuSE  |  Debian B2D | Gentoo  |\n\n商业公司一般依靠后续支持与维护获得收益。\nCentOS：由社群支持的包，旨在100%地与Red Hat Linux企业版兼容，但不包含Red Hat的商业软件。\nUbuntu：知名Linux发行版之一，由Canonical有限公司赞助，基于Debian，使用自己的软件包库，与Debian的有所不同，旨在开发出更加友好的桌面。\nGentoo：这个包采用自己独特的Portage包管理系统，吸引了许多狂热爱好者以及专业人士，由于能自己编译及调整源码依赖等选项，而获得至高的自定义性及优化的软件，在源码包也有相当多新旧版本的选择，是个强调能自由选择的发行版。\n\n\n\n\n\n","tags":["Linux"]},{"title":"Linux学习之路0x00——计算机概论","url":"/2018/07/12/Linux学习之路0x00——计算机概论/","content":"\n*本系列文章主要记录本人学习[《鸟哥的Linux私房菜》](http://linux.vbird.org/)过程中的重点难点。之前也有学习过Linux，但都是半途而废，现在希望有所记录，有所收获，坚持不懈。*\n\n# 计算机概论\n\n本文章对应[《鸟哥的Linux私房菜》](http://linux.vbird.org/)的第零章《计算机概论》。这一章的内容，实际上在《计算机组成原理》课程中已经学过了，但很容易忘记，所以就将重点做个简单的记录，重点在于那些重要的，易忘的，不做完全的记录。\n\n## 计算机的硬件组成的5个部件\n\n- 输入\n- 输出\n- 控制单元\n- 运算单元\n- 存储\n\n## CPU架构与相关设备原件\n\n- 北桥： 负责链接速度较快的CPU、内存和显卡等原件，现一般整合在CPU中\n- 南桥： 负责链接速度较慢的设备接口，如硬盘、USB、网卡等\n- 内存： DRAM（SDRAM、DDR）\n- CPU高速缓存：　SRAM\n- 固件(firmware)： 如BIOS程序写在固件中，掉电保持。\n- 磁盘\n\t- 磁头（head）\n\t- 磁道（track）\n\t- 柱面（cylinder）\n\t- 扇区（sector）\n\t- 圆盘（platter）\n\t- 缓存\n\t- 接口 SATA、SAS、USB\n- 设备IO与IRQ中断信道\n\n## 操作系统\n操作系统是用户和计算机的接口，同时也是计算机硬件和其他软件的接口。\n核心功能：\n- 系统调用接口\n- 程序管理\n- 内存管理\n- 文件系统管理\n- 设备驱动（操作系统提供接口，厂商提供驱动程序）\n\n\n\n","tags":["Linux"]},{"title":"使用hexo部署GitHub博客过程记录","url":"/2018/07/12/使用hexo部署GitHub博客过程记录/","content":"关于利用hexo搭建、部署GitHub博客网站，[Hexo官网](https://hexo.io/ \"Hexo官网\")以及其他教程给出了详细的教程，所以这里只记录我自己的一个过程。\n\n1. 安装[Node.js](http://nodejs.org/en/download/)\n2. 安装Hexo并初始化\n\t```  bash\n\tnpm install -g hexo-cli \n\thexo init  # 在目标目录即博客目录下运行\n\tnpm install hexo-deployer-git --save # 安装hexo-git插件\n\t```\n3. 安装[Git](https://git-scm.com/download/win)，并在[Github](https://github.com/)添加SSH公钥\n4. 建立Github个人仓库，仓库名为`$username$.github.io`\n5. 链接hexo与GitHub博客仓库\n\t修改_config.yml文件\n\t```\ndeploy:\n \ttype: git\n \trepository: git@github.com:$yourusername$/$yourusername$.github.io.git\n \tbranch: master\n\n\t```\n\t**注意\":\"后面需要空格隔开，否则无法识别关键字，导致链接失败！**\n6. 绑定域名\n\t如果有自己的域名可以将其与GitHub博客绑定，从而通过你的域名而不是`$yourusername$.github.io`访问博客\n\t- 添加A记录，记录值为192.30.252.153\n\t- 添加CNAME记录，记录值为`$yourusername$.github.io`\n\t- 在Github博客仓库中的Setting中修改Custom domain为你的域名\n\t- 进入本地博客目录下的source，创建文本文件CNAME，无文件后缀`.txt`,并把你的域名写入文本文件中\n7. 更换主题\n\t- 在hexo的[Themes](https://hexo.io/themes/)中挑选喜欢的主题，并clone到本地目录的theme目录下\n\t- 将_config.yml中的`theme`关键字的值改为新主题的文件夹名称\n8. 部署到GitHub博客上\n\t```\n\thexo g # 生成静态网页文件\n\thexo d # 部署到Github\n\t```\n\t以上代码可以等价于`hexo d -g`或`hexo g -d` 在每一次修改后都可以执行这些指令，同步到GitHub博客上\n9. 其他常用命令\n\t```\n\thexo new [layout] <title> # 在本地/sourece/_post目录下生成md文件，该文件对应一篇博客文章页面\n\thexo s # 启动服务器。默认情况下，访问网址为： http://localhost:4000/\n\t```\n\t更多命令与使用可查看[官网教程](https://hexo.io/zh-cn/docs/)\n","tags":["miscellaneous"]},{"title":"Hello World","url":"/2018/07/10/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]